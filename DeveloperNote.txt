docker-compose.override.yml
The eShopOnContainers application, uses the internal docker DNS that maps Ocelot gateway (OcelotGW).
So the webshoppingapigw maps directly to localhost:5101 docker image.

Contains open ports for debugging, such as 5101:80
Use these debugging port for accessing services directly:
http://localhost:5101/api/v1/catalog/items?pageIndex=0&pageSize=10

The OcelotGW has internal API that re-routes the service calling, so the API being called by MVC will look like this:
http://webshoppingapigw/api/v1/c/catalog/items?pageIndex=0&pageSize=10

Running the services individually will launch in a separate port, for Catalog.API:
http://localhost:55101
The catalog.api for testing is defined in the docker-compose.yml
    ports:
      - "5101:80"   # Important: In a production environment your should remove the external port (5101) kept here for microservice debugging purposes. 

docker-compose.override.yml
==> The environment setting for webmvc determine the application settings in Startup.cs, instead of the appsettings.json
https://www.scottbrady91.com/Docker/ASPNET-Core-and-Docker-Environment-Variables

  webmvc:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - PurchaseUrl=http://webshoppingapigw
      - IdentityUrl=http://10.0.75.1:5105  # Local Mac: Use http://docker.for.mac.localhost:5105 || Local Windows:  Use 10.0.75.1 in a "Docker for Windows" environment, if using "localhost" from browser. || #Remote access: Use ${ESHOP_EXTERNAL_DNS_NAME_OR_IP} if using external IP or DNS name from browser.
      - MarketingUrl=http://webmarketingapigw                                                    
      - CatalogUrlHC=http://catalog.api/hc
      - OrderingUrlHC=http://ordering.api/hc
      - IdentityUrlHC=http://identity.api/hc     #Local: Use ${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}, if using external IP or DNS name from browser.          
      - BasketUrlHC=http://basket.api/hc
      - MarketingUrlHC=http://marketing.api/hc
      - PaymentUrlHC=http://payment.api/hc
      - SignalrHubUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5202
      - UseCustomizationData=True
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
    ports:
      - "5100:80"

eShopOnContainers.WebMVC
The WebHost.CreateDefaultBuilder(args) applies with pre-configured defaults for MVC core.
https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.webhost.createdefaultbuilder?view=aspnetcore-2.1#Microsoft_AspNetCore_WebHost_CreateDefaultBuilder

However it is setup that any system environment variables will overwrite the appsettings.json configuration, this is because in the WebMvc.Program, the environment builder is then set to:
.ConfigureAppConfiguration((builderContext, config) =>
{
	config.AddEnvironmentVariables();
})

DEBUGGING
Run individual API:
cd "C:\Projects\eShopOnContainers"
docker-compose run --service-ports catalog.api

To access the API when the eShopOnContainers MVC app is running, use the debugging port.
Example, for the webmarketingapigw domain name, it is setup to use port 5202 in the docker-compose 
http://localhost:5202/api/v1/c/catalog/items/


QUESTIONS:
How to route the services to other machines? OcelotGW configuration? 
=> Use ReverseProxy config, OcelotGW use the docker name to find the service.
 webshoppingapigw:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5202:80"   

The OcelotGW DownstreamHostAndPorts configuration defines which host can be used:
      "DownstreamPathTemplate": "/api/{version}/{everything}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "catalog.api",
          "Port": 80
        }
      ],
	  
How to have multiple services that the gateway can use? Load balancing the services?